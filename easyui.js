// Generated by CoffeeScript 1.12.7
(function() {
  var feedback_tmpl, guess_times_tmpl, props_tmpl, round_logs, round_to_x_digits;

  guess_times_tmpl = '<tr>\n  <td>100 / Stunde:</td>\n  <td>{{online_throttling_100_per_hour}}</td>\n  <td> (throttled online attack)</td>\n</tr>\n<tr>\n  <td>10&nbsp; / Sekunde:</td>\n  <td>{{online_no_throttling_10_per_second}}</td>\n  <td> (unthrottled online attack)</td>\n</tr>\n<tr>\n  <td>10 Tausend / Sekunde:</td>\n  <td>{{offline_slow_hashing_1e4_per_second}}</td>\n  <td> (offline attack, slow hash, many cores)</td>\n<tr>\n  <td>10B / Sekunde:</td>\n  <td>{{offline_fast_hashing_1e10_per_second}}</td>\n  <td> (offline attack, fast hash, many cores)</td>\n</tr>';

  feedback_tmpl = '{{#warning}}\n<tr>\n  <td style="color: red">Achtung: </td>\n  <td colspan="2">{{warning}}</td>\n</tr>\n{{/warning}}\n{{#has_suggestions}}\n<tr>\n  <td style="vertical-align: top"><strong>So kann man das verbessern:</strong></td>\n  <td colspan="2">\n    {{#suggestions}}\n    - {{.}} <br />\n    {{/suggestions}}\n  </td>\n</tr>\n{{/has_suggestions}}';

  props_tmpl = '<div class="match-sequence">\n{{#sequence}}\n<table>\n  <tr>\n    <td colspan="2">\'{{token}}\'</td>\n  </tr>\n  <tr>\n    <td>Erraten durch:</td>\n    <td>{{pattern}}</td>\n  </tr>\n  <tr>\n    <td>guesses_log10:</td>\n    <td>{{guesses_log10}}</td>\n  </tr>\n  {{#cardinality}}\n  <tr>\n    <td>cardinality:</td>\n    <td>{{cardinality}}</td>\n  </tr>\n  <tr>\n    <td>Länge:</td>\n    <td>{{length}}</td>\n  </tr>\n  {{/cardinality}}\n  {{#rank}}\n  <tr>\n    <td>Wörterbuch:</td>\n    <td>{{dictionary_name}}</td>\n  </tr>\n  <tr>\n    <td>rank:</td>\n    <td>{{rank}}</td>\n  </tr>\n  <tr>\n    <td>reversed:</td>\n    <td>{{reversed}}</td>\n  </tr>\n  {{#l33t}}\n  <tr>\n    <td>l33t subs:</td>\n    <td>{{sub_display}}</td>\n  </tr>\n  <tr>\n    <td>un-l33ted:</td>\n    <td>{{matched_word}}</td>\n  </tr>\n  {{/l33t}}\n  <tr>\n    <td>base-guesses:</td>\n    <td>{{base_guesses}}</td>\n  </tr>\n  <tr>\n    <td>uppercase-variations:</td>\n    <td>{{uppercase_variations}}</td>\n  </tr>\n  <tr>\n    <td>l33t-variations:</td>\n    <td>{{l33t_variations}}</td>\n  </tr>\n  {{/rank}}\n  {{#graph}}\n  <tr>\n    <td>graph:</td>\n    <td>{{graph}}</td>\n  </tr>\n  <tr>\n    <td>turns:</td>\n    <td>{{turns}}</td>\n  </tr>\n  <tr>\n    <td>shifted count:</td>\n    <td>{{shifted_count}}</td>\n  </tr>\n  {{/graph}}\n  {{#base_token}}\n  <tr>\n    <td>base_token:</td>\n    <td>\'{{base_token}}\'</td>\n  </tr>\n  <tr>\n    <td>base_guesses:</td>\n    <td>{{base_guesses}}</td>\n  </tr>\n  <tr>\n    <td>num_repeats:</td>\n    <td>{{repeat_count}}</td>\n  </tr>\n  {{/base_token}}\n  {{#sequence_name}}\n  <tr>\n    <td>sequence-name:</td>\n    <td>{{sequence_name}}</td>\n  </tr>\n  <tr>\n    <td>sequence-size</td>\n    <td>{{sequence_space}}</td>\n  </tr>\n  <tr>\n    <td>ascending:</td>\n    <td>{{ascending}}</td>\n  </tr>\n  {{/sequence_name}}\n  {{#regex_name}}\n  <tr>\n    <td>regex_name:</td>\n    <td>{{regex_name}}</td>\n  </tr>\n  {{/regex_name}}\n  {{#day}}\n  <tr>\n    <td>day:</td>\n    <td>{{day}}</td>\n  </tr>\n  <tr>\n    <td>month:</td>\n    <td>{{month}}</td>\n  </tr>\n  <tr>\n    <td>year:</td>\n    <td>{{year}}</td>\n  </tr>\n  <tr>\n    <td>separator:</td>\n    <td>\'{{separator}}\'</td>\n  </tr>\n  {{/day}}\n</table>\n{{/sequence}}\n</div>';

  round_to_x_digits = function(n, x) {
    return Math.round(n * Math.pow(10, x)) / Math.pow(10, x);
  };

  round_logs = function(r) {
    var i, len, m, ref, results1;
    r.guesses_log10 = round_to_x_digits(r.guesses_log10, 5);
    ref = r.sequence;
    results1 = [];
    for (i = 0, len = ref.length; i < len; i++) {
      m = ref[i];
      results1.push(m.guesses_log10 = round_to_x_digits(m.guesses_log10, 5));
    }
    return results1;
  };

  requirejs(['./zxcvbn'], function(zxcvbn) {
    return $(function() {
      var _listener, last_q, rendered, results_lst;
      window.zxcvbn = zxcvbn;
      results_lst = [];
      rendered = Mustache.render(results_tmpl, {
        results: results_lst
      });
      $('#results').html(rendered);
      last_q = '';
      _listener = function() {
        var current, r, results;
        current = $('#search-bar').val();
        if (!current) {
          $('#search-results').html('');
          return;
        }
        if (current !== last_q) {
          last_q = current;
          r = zxcvbn(current);
          round_logs(r);
          r.sequence_display = Mustache.render(props_tmpl, r);
          r.guess_times_display = Mustache.render(guess_times_tmpl, r.crack_times_display);
          r.feedback.has_suggestions = r.feedback.suggestions.length > 0;
          r.feedback_display = Mustache.render(feedback_tmpl, r.feedback);
          results = {
            results: [r]
          };
          rendered = Mustache.render(results_tmpl, results);
          return $('#search-results').html(rendered);
        }
      };
      return setInterval(_listener, 100);
    });
  });

}).call(this);
